@model X.PagedList.IPagedList<MetaOMS.ViewModels.DeliveryVM>
@using X.PagedList.Mvc.Core;
@using X.PagedList.Mvc;
@using X.PagedList;
@{
    ViewData["Title"] = "PendingReturnRefundList- ";
}

<link href="~/Toastr/toastr.min.css" rel="stylesheet" />
<link href="~/sweetalert2/sweetalert2.min.css" rel="stylesheet" />

<div class="col-10 offset-1 text-center">
    <h2 class="text-center mt-5 mb-3">Pending Returns & Refunds</h2>
    <div class="search-form mb-2">
        <div class="input-group">
            <div class="input-group-prepend">
                <div class="input-group-text">
                    <i class="ti-search"></i>
                </div>
            </div>
            <input id="myCustomSearch" type="text" class="form-control" placeholder="Type here to search...">
        </div>
    </div>
    <div class="table-responsive">
        <table class="table" id="example">
            <thead class="thead-light">
                <tr>
                    <th>#</th>
                    <th>Deliver</th>
                    <th>Customer</th>
                    <th>Contact</th>
                    @*<th>Address</th>*@
                    <th>Products</th>
                    <th>Product quantity</th>
                    <th>Action</th>
                    <th>Total price</th>
                    <th>Status</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.Count; i++)
                {
                <tr>
                    <td class="align-middle">@Model[i].SerialNo</td>
                    <td class="align-middle">
                        <input asp-for="@Model[i].ReturnedRefundedVMStatus" type="checkbox" class="form-check" id="status_deliverable"
                               data-id="@Model[i].HiddenPKVMId" />
                    </td>
                    <td class="align-middle">@Model[i].CustomerVMName</td>
                    <td class="align-middle">@Model[i].CustomerVMContactNo</td>
                    @*<td class="align-middle">
                        @Model[i].CustomerVMDistrict, @Model[i].CustomerVMSubDistrict, @Model[i].CustomerVMArea,
                        @Model[i].CustomerVMRoadNo, @Model[i].CustomerVMHouseNo
                    </td>*@
                    <td>
                        <table class="d-flex justify-content-center table-borderless">
                            @foreach (var item in Model[i].productInventory_VM.productInventoryVMs)
                            {
                                <tr>
                                    <td class="align-middle">@item.NameVM</td>
                                </tr>
                            }
                        </table>
                    </td>
                    <td>
                        <table class="d-flex justify-content-center table-borderless">
                            @foreach (var item in Model[i].productInventory_VM.productInventoryVMs)
                            {
                                <tr>
                                    <td class="align-middle">@item.QuantityVM</td>
                                </tr>
                            }
                        </table>
                    </td>
                    <td>
                        <table class="d-flex justify-content-center table-borderless">
                            @foreach (var item in Model[i].productInventory_VM.productInventoryVMs)
                            {
                            <tr>
                                @if (item.StringStatusVM == "Return")
                                {
                                    <td class="font-weight-bold text-info align-middle">@item.StringStatusVM</td>
                                }
                                else if (item.StringStatusVM == "Refund")
                                {
                                    <td class="font-weight-bold text-primary align-middle">@item.StringStatusVM</td>
                                }
                                else if (item.StringStatusVM == "Return & Refund")
                                {
                                    <td class="font-weight-bold text-warning align-middle">@item.StringStatusVM</td>
                                }
                                @*else
                                {
                                    <td class="font-weight-bold">@item.StringStatusVM</td>
                                }*@
                            </tr>
                            }
                        </table>
                    </td>
                    <td class="align-middle">@Model[i].TotalPriceVM</td>
                    <td class="font-weight-bold align-middle" id="status">@Model[i].StringReturnedRefundedVMStatus</td>
                    <td class="align-middle">
                        <a onclick="showInPopup('@Url.Action("PendingReturnRefundIndividualInfo","DeliveryStaff",new {id=@Model[i].HiddenPKVMId },Context.Request.Scheme)','Details')"
                           class="btn btn-orange text-white"><i class="mdi mdi-information-outline"></i></a>
                    </td>
                </tr>
                }
            </tbody>
        </table>
    </div>
    @Html.PagedListPager((IPagedList)Model, page => Url.Action("PendingReturnRefundList", new { page = page }),
   new X.PagedList.Mvc.Core.Common.PagedListRenderOptions
   {
       DisplayItemSliceAndTotal = true,
       ContainerDivClasses = new[] { "navigation" },
       LiElementClasses = new[] { "page-item" },
       PageClasses = new[] { "page-link" },
   })
</div>

@section Scripts{
    <script>
        $("input[type=checkbox]").click(function () {
            var THIS = $(this);

            var hiddenPkId = $(this).data("id");
            console.log($(this).prop("checked"))
            if ($(this).prop("checked")) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You want to complete this action !",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, Do it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        try {
                            var url = "/DeliveryStaff/ConfirmReturnRefund";
                            $.getJSON(url, { id: hiddenPkId }, function (data) {
                                if (data.sms === "Saved") {
                                    toastr["success"]("Successful")

                                    THIS.closest("tr").find('#status').text("Done");
                                }
                                else {
                                    toastr["info"]("Pending")
                                    THIS.closest("tr").find('#status').text("Pending");
                                }
                            });
                        } catch (ex) {
                            console.log(ex)
                        }
                    }
                    else {
                        $(this).prop("checked", false);
                    }
                });
            }
            else {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You want to keep this action pending !",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, Do it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        try {
                            var url = "/DeliveryStaff/ConfirmReturnRefund";
                            $.getJSON(url, { id: hiddenPkId }, function (data) {
                                if (data.sms === "Saved") {
                                    toastr["success"]("Successful")
                                    THIS.closest("tr").find('#status').text("Done"); console.log(hiddenPkId);
                                }
                                else {
                                    toastr["info"]("Pending")
                                    THIS.closest("tr").find('#status').text("Pending");
                                }
                            });
                        } catch (ex) {
                            console.log(ex)
                        }
                    }
                    else {
                        $(this).prop("checked", true);
                    }
                });
            }
        });
    </script>
    <script>
        $(document).ready(function () {
            $('ul.pagination > li.disabled > a').addClass('page-link');
        });
    </script>
    <script>
        $(document).ready(function () {
            $('#example').DataTable({
                "dom": 'lrtip',
                "info": false,
                "lengthChange": false,
                "paging": false,
            });
            var table = $('#example').DataTable();
            $('#myCustomSearch').on('keyup', function () {
                table.search($(this).val()).draw();
            });
        });
    </script>
    <script src="~/Toastr/toastr.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.22/js/jquery.dataTables.min.js"></script>
    <script src="~/sweetalert2/sweetalert2.min.js"></script>
}